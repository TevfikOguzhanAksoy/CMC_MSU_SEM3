#include <stdio.h>
#include <stdlib.h>

#define BUF_LINE_SZ 50

char *bufferLine;
char **separatedLine;

int StrToInt(const char *str);

int copyStr(const char s1[], char s2[]);

const char *readStr(FILE *file, int l_numStr);

int parseStr(char *str, int symbolQuantity, char par);

int sortStr(char **str, int numSortedStr);

int main(int argc, char **argv) {

    char par;
    bufferLine = (char *) malloc(BUF_LINE_SZ * sizeof(char));
    if (bufferLine == NULL) {
        printf("Error allocating memory for bufferLine.");
        exit(1);
    }
    char *str = (char *) malloc(200 * sizeof(char));
    if (str == NULL) {
        printf("An error occured while allocating memory for the string");
        return -1;
    }
    int numStr = 1;
    int tmpCount = 0;
    int i;

    if (argc < 2) {
        printf("Name of the file is not indicated in command line!\n");
        printf("Enter a string:");
        fgets(str, 199, stdin);
        for (i = 0; str[i + 1] != '\0'; ++i) {
            tmpCount++;
        }
        //printf("%d",tmpCount);
        if (tmpCount == 0) {
            printf("It's an empty string!");
            bufferLine[0] = '\0';
        } else {
            str = (char *) realloc(str, tmpCount * sizeof(char));
            bufferLine = (char *) realloc(bufferLine, tmpCount * sizeof(char));
        //    printf("breakpoint3\n\n");
            copyStr(str, bufferLine);
        //    printf("breakpoint4\n\n");
        }
        //printf("%s",str);
        //printf("%s",bufferLine);
        while (1) {
            printf("\nPlease enter a symbol, according to which the string will be separated!\n");
            printf("Notice that entering symbol 'q' will end up in exiting the program! :");
            scanf("%c", &par);
            if (par == 'q') {
                printf("You've entered q! Shutting down the program.\n");
                break;
            }
            parseStr(bufferLine, tmpCount, par);
            scanf("%c",&par);
            printf("%c",par);
        }
        /* FILE *dosya;
         dosya = fopen(argv[1], "r");
         if (dosya == NULL) {
             printf("Error opening the file!\n");
             return -1;
         }
         numStr = 1;
         printf("%s", argv[1]);
         fclose(dosya); */
    } else {
        if (argv[2] == NULL) {
            FILE *dosya;
            dosya = fopen(argv[1], "r");
            if (dosya == NULL) {
                printf("Error opening the file!\n");
                return -1;
            }
            numStr = 1;
            printf("%d. String: ", numStr);
            readStr(dosya, numStr);
            printf("%s", bufferLine);
            fclose(dosya);
        } else
            numStr = StrToInt(argv[2]);
    }
    if (argv[2] != NULL) {
        printf("%s.String: ", argv[2]);
        FILE *dosya;
        dosya = fopen(argv[1], "r");
        if (dosya == NULL) {
            printf("Error opening the file!\n");
            return -1;
        }
        readStr(dosya, numStr);
        printf("%s", bufferLine);
        fclose(dosya);
    }

    	par = 't';
	while (1) {
            printf("\nPlease enter a symbol, according to which the string will be separated!\n");
            printf("Notice that entering symbol 'q' will end up in exiting the program! :");
            scanf("%c", &par);
            if (par == 'q') {
                printf("You've entered q! Shutting down the program.\n");
                break;
            }
            parseStr(bufferLine, tmpCount, par);
            scanf("%c",&par);
            printf("%c",par);
        }

    /*while (par != 'q') {
        printf("\nPlease enter a symbol, according to which the string will be separated!\n");
        printf("Notice that entering symbol 'q' will end up in exiting the program! :");
        par = getchar();

        if (par == 'q') {
            printf("You've entered q! Shutting down the program.\n");
            break;
        }
       parseStr(bufferLine, tmpCount, par);

       printf("\nPlease enter a symbol, according to which the string will be separated!\n");
       printf("Notice that entering symbol 'q' will end up in exiting the program! :");
       par = getchar();
    }*/

    free(str);
    free(bufferLine);
    return 0;
}

int StrToInt(const char *str) {
    int res = 0, i;
    for (i = 0; str[i] != '\0'; ++i)
        res = res * 10 + str[i] - '0';
    return res;
}

int copyStr(const char s1[], char s2[]) {
    int i;
    for (i = 0; s1[i] != '\0'; ++i) {
        s2[i] = s1[i];
    }
    //printf("After cycle");
    s2[i] = '\0';
    return 0;
}

const char *readStr(FILE *file, int l_numStr) {

    int countStr = 1;
    const size_t line_size = 300;
    char *line = (char *) malloc(50 * line_size);
    line = (char *) realloc(line, 2 * line_size);
    while (fgets(line, line_size, file) != NULL) {
        if (countStr == l_numStr) {
            copyStr(line, bufferLine);
        }
        countStr++;
    }
    countStr -= 1;
    if ((l_numStr > countStr) || (l_numStr <= 0)) {
        printf("Error: line %d does not exist!\n", l_numStr);
        printf("Shutting down the program!\n");
        exit(-1);
    }
    return 0;
}

int parseStr(char *str, int symbolQuantity, char par) {

    int i, j = 0, countChar = 0;
    separatedLine = (char **) malloc(50 * sizeof(char *));
    if (separatedLine == NULL) {
        printf("Error allocating memory for separatedLine");
        return -1;
    }

    char *tmpStr;
    tmpStr = (char *) malloc(symbolQuantity * sizeof(char));
    if (tmpStr == NULL) {
        printf("Error allocating memory for tmpStr");
        return -1;
    }

    copyStr(str, tmpStr);

    for (i = 0; tmpStr[i] != '\0'; ++i) {
        countChar++;
    }

    int checkNum = 0;
    for (i = 0; i <= countChar; i++) {
        if (tmpStr[i] == par) {
            checkNum++;
            tmpStr[i] = '\0';
        }
    }

    if (checkNum == 0) {
        printf("\nERROR: There is no such symbol in this string!\n");
        printf("Shutting down the program!\n");
        exit(-1);
    }
    printf("\n~~~~~~~~~Separated String~~~~~~~~~\n");

    if (*str != '\0') {
        separatedLine[0] = tmpStr;
        j++;
        printf("%s\n", separatedLine[0]);
    }
    separatedLine = (char **) realloc(separatedLine, (j) * sizeof(char *));
    if (separatedLine == NULL) {
        printf("Error reallocating memory of separatedLine");
        return -1;
    }
    for (i = 1; i <= countChar; i++) {
        if ((tmpStr[i] != '\0') && (tmpStr[i - 1] == '\0')) {
            separatedLine[j] = tmpStr + i;
            printf("%s\n", separatedLine[j]);
            j++;
        }
    }

    sortStr(separatedLine, j);
    printf("~~~~~~~~~Sorted String~~~~~~~~~\n");

    for (i = 0; i < j; i++) {
        printf("%s\n", separatedLine[i]);
    }
    return 0;
}

int compStr(const char *str1, const char *str2) {
    int i = 0;
    int flag = 0;
    while (flag == 0) {
        if ((unsigned char) str1[i] > (unsigned char) str2[i]) {
            flag = 1;
        } else if ((unsigned char) str1[i] < (unsigned char) str2[i]) {
            flag = -1;
        }

        if ((unsigned char) str1[i] == '\0') {
            break;
        }

        i++;
    }
    return flag;
}

int sortStr(char **str, int numSortedStr) {
    int i, j = 0;
    char *tmpStr;
    while (j == 0) {
        j = 1;
        for (i = 0; i < numSortedStr - 1; i++) {
            if (compStr(str[i], str[i + 1]) == 1) {
                tmpStr = str[i];
                str[i] = str[i + 1];
                str[i + 1] = tmpStr;
                j = 0;
            }
        }
    }
    return 0;
}
